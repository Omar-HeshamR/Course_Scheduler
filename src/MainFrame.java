/**
 * @author Omar
 */

import java.sql.Timestamp;
import java.util.Date;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    private String currentSemester; 

    public MainFrame() {
        initComponents();
        rebuildSemesterComboBoxes();
        rebuildStudentComboBoxes();
        rebuildCourseComboBox();
    }
    
    public void rebuildSemesterComboBoxes(){
       currentSemester = String.valueOf(changeSemesterComboBox.getSelectedItem());
       ArrayList<String> semesters = SemesterQueries.getSemesterList();
       changeSemesterComboBox.setModel(new javax.swing.DefaultComboBoxModel(semesters.toArray()));
       if (semesters.size() > 0) {
            currentSemester = (String)(changeSemesterComboBox.getSelectedItem());
            currentSemesterLabel.setText(currentSemester);
        }  else
        {
            currentSemesterLabel.setText("None, add a semester.");
            currentSemester = "None";
            changeSemesterComboBox.removeAllItems();
        }
    }

    public void rebuildStudentComboBoxes(){
        ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
        ArrayList<String> studentNames = new ArrayList();
        for (StudentEntry student: students) {
            studentNames.add(new String(student.lastName + ", "+ student.firstName));
        }   
        selectStudentComboBox.setModel(new javax.swing.DefaultComboBoxModel(studentNames.toArray()));
        selectStudentComboBox2.setModel(new javax.swing.DefaultComboBoxModel(studentNames.toArray()));
        selectStudentComboBox3.setModel(new javax.swing.DefaultComboBoxModel(studentNames.toArray()));
        selectStudentComboBox4.setModel(new javax.swing.DefaultComboBoxModel(studentNames.toArray()));

    }
    
    public void rebuildCourseComboBox(){
         String semester = currentSemesterLabel.getText();
         ArrayList<String> courseCodes = CourseQueries.getAllCourseCodes(currentSemester);
         selectCourseComboBox.setModel(new javax.swing.DefaultComboBoxModel(courseCodes.toArray()));
         selectCourseComboBox2.setModel(new javax.swing.DefaultComboBoxModel(courseCodes.toArray()));
         selectCourseComboBox3.setModel(new javax.swing.DefaultComboBoxModel(courseCodes.toArray()));
         selectCourseComboBox4.setModel(new javax.swing.DefaultComboBoxModel(courseCodes.toArray()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        currentSemesterLabel = new javax.swing.JLabel();
        changeSemesterComboBox = new javax.swing.JComboBox<>();
        changeSemesterButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        addSemesterTextfield = new javax.swing.JTextField();
        AddSemesterSubmitButton = new javax.swing.JButton();
        addSemesterStatus = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        addStudentSubmitButton = new javax.swing.JButton();
        studentIDTextField = new javax.swing.JTextField();
        firstNameTextField = new javax.swing.JTextField();
        lastNameTextField = new javax.swing.JTextField();
        studentAddedLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        courseCodeTextField = new javax.swing.JTextField();
        courseDescriptionTextField = new javax.swing.JTextField();
        seatsSpinner = new javax.swing.JSpinner();
        addCourseSubmitButton = new javax.swing.JButton();
        addCourseStatusLabel = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        selectCourseComboBox3 = new javax.swing.JComboBox<>();
        displayCourseListButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        waitlistedStudentsJTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        scheduledStudentsJTable = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        selectStudentComboBox4 = new javax.swing.JComboBox<>();
        dropStudentButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        dropStudentTextArea = new javax.swing.JTextArea();
        jPanel12 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        selectCourseComboBox4 = new javax.swing.JComboBox<>();
        dropCourseButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        courseDroppedTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayCoursesTable = new javax.swing.JTable();
        displayCoursesButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        selectCourseComboBox = new javax.swing.JComboBox<>();
        selectStudentComboBox = new javax.swing.JComboBox<>();
        scheduleCourseSubmitButton = new javax.swing.JButton();
        scheduleCourseStatusLabel = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayScheduleTable = new javax.swing.JTable();
        displayStudentScheduleButton = new javax.swing.JButton();
        selectStudentComboBox2 = new javax.swing.JComboBox<>();
        jPanel9 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        selectStudentComboBox3 = new javax.swing.JComboBox<>();
        selectCourseComboBox2 = new javax.swing.JComboBox<>();
        studentDropCourseButton = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        studentDropCourseTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 1, 36)); // NOI18N
        jLabel1.setText("Course Scheulder");

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel2.setText("Current Semester:");

        currentSemesterLabel.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        currentSemesterLabel.setText("None");

        changeSemesterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        changeSemesterButton.setText("Change Semester");
        changeSemesterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeSemesterButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Semester Name:");

        addSemesterTextfield.setColumns(10);

        AddSemesterSubmitButton.setText("Submit");
        AddSemesterSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddSemesterSubmitButtonActionPerformed(evt);
            }
        });

        addSemesterStatus.setText("                                                                        ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addSemesterTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(AddSemesterSubmitButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addSemesterStatus)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(addSemesterTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AddSemesterSubmitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addSemesterStatus)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Add Semester", jPanel3);

        jLabel8.setText("Student ID:");

        jLabel9.setText("First Name:");

        jLabel10.setText("Last Name:");

        addStudentSubmitButton.setText("Submit");
        addStudentSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStudentSubmitButtonActionPerformed(evt);
            }
        });

        studentIDTextField.setColumns(10);

        firstNameTextField.setColumns(10);

        lastNameTextField.setColumns(10);

        studentAddedLabel.setText("  ");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(addStudentSubmitButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(studentAddedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 373, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(studentIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addStudentSubmitButton)
                .addGap(18, 18, 18)
                .addComponent(studentAddedLabel)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Add Student", jPanel4);

        jLabel5.setText("Course Code:");

        jLabel6.setText("Course Description:");

        jLabel7.setText("Seats:");

        courseCodeTextField.setColumns(8);
        courseCodeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseCodeTextFieldActionPerformed(evt);
            }
        });

        courseDescriptionTextField.setColumns(30);

        addCourseSubmitButton.setText("Submit");
        addCourseSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCourseSubmitButtonActionPerformed(evt);
            }
        });

        addCourseStatusLabel.setText("   ");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(courseCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(courseDescriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addCourseSubmitButton)
                            .addComponent(seatsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 206, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addCourseStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(courseCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(courseDescriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(seatsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addCourseSubmitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addCourseStatusLabel)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Add Course", jPanel5);

        jLabel16.setText("Select Course:");

        selectCourseComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        displayCourseListButton.setText("Display");
        displayCourseListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayCourseListButtonActionPerformed(evt);
            }
        });

        waitlistedStudentsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Last Name", "First Name", "StudentID"
            }
        ));
        jScrollPane3.setViewportView(waitlistedStudentsJTable);

        scheduledStudentsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Last Name", "First Name", "StudentID"
            }
        ));
        jScrollPane4.setViewportView(scheduledStudentsJTable);

        jLabel17.setText("Scheduled Students:");

        jLabel18.setText("Waitlisted Students:");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectCourseComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayCourseListButton)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(selectCourseComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displayCourseListButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );

        jTabbedPane2.addTab("Display Course List of Students", jPanel10);

        jLabel19.setText("Select Student: ");

        selectStudentComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        dropStudentButton.setText("Drop Student");
        dropStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropStudentButtonActionPerformed(evt);
            }
        });

        dropStudentTextArea.setColumns(20);
        dropStudentTextArea.setRows(5);
        jScrollPane5.setViewportView(dropStudentTextArea);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectStudentComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dropStudentButton))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 54, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(selectStudentComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropStudentButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Drop Student", jPanel11);

        jLabel20.setText("Select Course To Be Dropped:");

        selectCourseComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        dropCourseButton.setText("Drop Course");
        dropCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropCourseButtonActionPerformed(evt);
            }
        });

        courseDroppedTextArea.setColumns(20);
        courseDroppedTextArea.setRows(5);
        jScrollPane6.setViewportView(courseDroppedTextArea);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectCourseComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dropCourseButton))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 194, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(selectCourseComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropCourseButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Drop Course", jPanel12);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 282, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Admin", jPanel1);

        displayCoursesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course Code", "Description", "Seats"
            }
        ));
        jScrollPane1.setViewportView(displayCoursesTable);

        displayCoursesButton.setText("Display");
        displayCoursesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayCoursesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 207, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(displayCoursesButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(displayCoursesButton)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Display Courses", jPanel6);

        jLabel11.setText("Select Course:");

        jLabel12.setText("Select Student:");

        selectCourseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        selectStudentComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        scheduleCourseSubmitButton.setText("Submit");
        scheduleCourseSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleCourseSubmitButtonActionPerformed(evt);
            }
        });

        scheduleCourseStatusLabel.setText("                                                                             ");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectCourseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectStudentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(scheduleCourseSubmitButton))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(scheduleCourseStatusLabel)))
                .addContainerGap(422, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(selectCourseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(selectStudentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scheduleCourseSubmitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scheduleCourseStatusLabel)
                .addContainerGap(103, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Schedule Courses", jPanel7);

        jLabel14.setText("Select Student:");

        displayScheduleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Course Code", "Status"
            }
        ));
        jScrollPane2.setViewportView(displayScheduleTable);

        displayStudentScheduleButton.setText("Display");
        displayStudentScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayStudentScheduleButtonActionPerformed(evt);
            }
        });

        selectStudentComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectStudentComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(229, 229, 229)
                .addComponent(displayStudentScheduleButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(selectStudentComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(displayStudentScheduleButton)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Display Schedule", jPanel8);

        jLabel3.setText("Select Student:");

        jLabel13.setText("Select Course:");

        selectStudentComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        selectCourseComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        studentDropCourseButton.setText("Drop Course");
        studentDropCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentDropCourseButtonActionPerformed(evt);
            }
        });

        studentDropCourseTextArea.setColumns(20);
        studentDropCourseTextArea.setRows(5);
        jScrollPane7.setViewportView(studentDropCourseTextArea);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(studentDropCourseButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(selectStudentComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(selectCourseComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 289, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(selectStudentComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(selectCourseComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(studentDropCourseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Drop Course", jPanel9);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane3)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Student", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentSemesterLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(changeSemesterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeSemesterButton)
                        .addGap(14, 14, 14))))
            .addGroup(layout.createSequentialGroup()
                .addGap(197, 197, 197)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(currentSemesterLabel)
                    .addComponent(changeSemesterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeSemesterButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void courseCodeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseCodeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_courseCodeTextFieldActionPerformed

    private void displayCoursesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayCoursesButtonActionPerformed
        currentSemester = currentSemesterLabel.getText();
        ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(currentSemester);
        ((DefaultTableModel)displayCoursesTable.getModel()).setNumRows(0);

        for (CourseEntry course: courses) {
            Object[] row = { course.getCourseCode(), course.getCourseDescription(), course.getSeats() };
            DefaultTableModel model = (DefaultTableModel) displayCoursesTable.getModel();
            model.addRow(row);
        }   

    }//GEN-LAST:event_displayCoursesButtonActionPerformed

    private void AddSemesterSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSemesterSubmitButtonActionPerformed
        String semester = addSemesterTextfield.getText();
        SemesterQueries.addSemester(semester);
        addSemesterStatus.setText("Semester "+ semester + " has been added");
        rebuildSemesterComboBoxes(); 
    }//GEN-LAST:event_AddSemesterSubmitButtonActionPerformed

    private void changeSemesterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeSemesterButtonActionPerformed
        currentSemester = String.valueOf(changeSemesterComboBox.getSelectedItem());
        currentSemesterLabel.setText(currentSemester);
                                                 // UPDATE COURSES TABLE
                    ArrayList<CourseEntry> courses2 = CourseQueries.getAllCourses(currentSemester);
                    ((DefaultTableModel)displayCoursesTable.getModel()).setNumRows(0);
                     for (CourseEntry course: courses2) {
                         Object[] row = { course.getCourseCode(), course.getCourseDescription(), course.getSeats() };
                         DefaultTableModel model = (DefaultTableModel) displayCoursesTable.getModel();
                         model.addRow(row); 
                     }
        rebuildCourseComboBox();
    }//GEN-LAST:event_changeSemesterButtonActionPerformed

    private void addStudentSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentSubmitButtonActionPerformed
        String studentID = studentIDTextField.getText();
        String firstName = firstNameTextField.getText();
        String lastName = lastNameTextField.getText();
        
        if(studentID.isBlank() == false && firstName.isBlank() == false && lastName.isBlank() == false){
            ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
            boolean alreadyExists = false;
            for (StudentEntry student: students) {
                if (student.getStudentID().equals(studentID)) {
                alreadyExists = true;
                }
            }   
            if(alreadyExists){studentAddedLabel.setText("Student Already Exists!");}else{
                StudentQueries.addStudent(new StudentEntry(studentID, firstName, lastName));
                studentAddedLabel.setText("Student " + lastName + ", " + firstName + " has been added.");
                rebuildStudentComboBoxes();
            }
        }else{
            studentAddedLabel.setText("Please fill fields properly!");
        }
    }//GEN-LAST:event_addStudentSubmitButtonActionPerformed

    private void addCourseSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCourseSubmitButtonActionPerformed
        String courseCode = courseCodeTextField.getText();
        String courseDescription = courseDescriptionTextField.getText();
        String semester = currentSemesterLabel.getText();
        int seats = (Integer) seatsSpinner.getValue();
        if(courseCode.isBlank() == false && courseDescription.isBlank() == false ){
          ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(semester);
          boolean alreadyExists = false;
          for (CourseEntry course: courses) {
                if (course.getCourseCode().equals(courseCode)) {
                alreadyExists = true;
                }
            }   
          if(alreadyExists == true){
            addCourseStatusLabel.setText("Course: " + courseCode + " already exists!");
          }
          else{
            CourseQueries.addCourse(new CourseEntry(semester, courseCode, courseDescription, seats));
            addCourseStatusLabel.setText("Course: " + courseCode + " is added!");
          }
        }else{
           addCourseStatusLabel.setText("Please fill fields properly!");
        }
        rebuildCourseComboBox();
                                         // UPDATE COURSES TABLE
                    ArrayList<CourseEntry> courses2 = CourseQueries.getAllCourses(currentSemester);
                    ((DefaultTableModel)displayCoursesTable.getModel()).setNumRows(0);
                     for (CourseEntry course: courses2) {
                         Object[] row = { course.getCourseCode(), course.getCourseDescription(), course.getSeats() };
                         DefaultTableModel model = (DefaultTableModel) displayCoursesTable.getModel();
                         model.addRow(row); 
                     }
    }//GEN-LAST:event_addCourseSubmitButtonActionPerformed

    private void scheduleCourseSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleCourseSubmitButtonActionPerformed
        // TODO add your handling code here:
        if (selectCourseComboBox.getItemCount() == 0 || selectStudentComboBox.getItemCount() == 0) {
            return;
        }
        String studentID = "";
        String selectedCourse = (String)(selectCourseComboBox.getSelectedItem());
        String selectedStudent = (String)(selectStudentComboBox.getSelectedItem());
        String[] studentList = selectedStudent.split(", ");
        String lastName = studentList[0];
        String firstName = studentList[1];
        String courseID = selectedCourse;
        
        Date date = new Date();  
        Timestamp timeStamp = new Timestamp(date.getTime());
        int seats = CourseQueries.getCourseSeats(currentSemester, courseID);

        ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
        for (StudentEntry student: students) {
            if (student.getFirstName().equals(firstName) && student.getLastName().equals(lastName)){
                studentID = student.getStudentID();
            }
        }
        String status = "S";
        if (seats == 0) {
            status = "W";
        }
        ArrayList<ScheduleEntry> schedules = ScheduleQueries.getScheduleByStudent(currentSemester, studentID);
        ScheduleEntry entry = new ScheduleEntry(currentSemester,studentID, courseID, status, timeStamp);
        
        for (ScheduleEntry oneEntry: schedules) {
            if (oneEntry.getCourseCode().equals(entry.getCourseCode())) {
                scheduleCourseStatusLabel.setText("Student " + lastName + ", " + firstName + " already scheduled");
                return;
            }
            
        }
       ScheduleQueries.addScheduleEntry(entry);
       if (status == "W"){
           scheduleCourseStatusLabel.setText("Student " + lastName + ", " + firstName + " waitlisted");
       } else{
            scheduleCourseStatusLabel.setText("Student " + lastName + ", " + firstName + " enrolled in " + courseID);
            CourseQueries.lowerSeats(currentSemester, courseID);
            currentSemester = currentSemesterLabel.getText();
            ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(currentSemester);
            ((DefaultTableModel)displayCoursesTable.getModel()).setNumRows(0);

             for (CourseEntry course: courses) {
                Object[] row = { course.getCourseCode(), course.getCourseDescription(), course.getSeats() };
                DefaultTableModel model = (DefaultTableModel) displayCoursesTable.getModel();
                model.addRow(row);
        }   
       }     
        reShowAdminStudentsOfACourse();
        reBuildAStudentSchedule();
    }//GEN-LAST:event_scheduleCourseSubmitButtonActionPerformed

    private void displayStudentScheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayStudentScheduleButtonActionPerformed
        // TODO add your handling code here:
        // displayStudentScheduleButton
        ((DefaultTableModel)displayScheduleTable.getModel()).setNumRows(0);
        currentSemester = currentSemesterLabel.getText();
        String selectedStudent = (String)(selectStudentComboBox2.getSelectedItem());
        String[] studentList = selectedStudent.split(", ");
        String lastName = studentList[0];
        String firstName = studentList[1];
        String studentID = "";
        
        ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
        for (StudentEntry student: students) {
            if (student.getFirstName().equals(firstName) && student.getLastName().equals(lastName)){
                studentID = student.getStudentID();
            }
        }

        ArrayList<ScheduleEntry> schedules = ScheduleQueries.getScheduleByStudent(currentSemester, studentID);
        
        for (ScheduleEntry entry: schedules) {
            Object[] row = { entry.getCourseCode(), entry.getStatus() };
            DefaultTableModel model = (DefaultTableModel) displayScheduleTable.getModel();
            model.addRow(row);
        }      

    }//GEN-LAST:event_displayStudentScheduleButtonActionPerformed

    private void dropStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropStudentButtonActionPerformed
        // TODO add your handling code here:
        String selectedStudent = (String)(selectStudentComboBox4.getSelectedItem());
        StudentEntry mySelectedStudent;
        if (selectedStudent == null){return;}
        String studentID = "";
        ArrayList<StudentEntry> students = new ArrayList<>();
        students = StudentQueries.getAllStudents();
        String[] studentList = selectedStudent.split(", ");
        String lastName = studentList[0];
        String firstName = studentList[1];
        for (StudentEntry student: students) {
                if (student.getFirstName().equals(firstName) && student.getLastName().equals(lastName)) {
                    mySelectedStudent = student;
                    studentID = mySelectedStudent.getStudentID();
                }
        }
        StudentQueries.dropStudent(studentID);
        dropStudentTextArea.setText(selectedStudent + studentID + " has been dropped from the list of students.");
        ArrayList<String> semesters = SemesterQueries.getSemesterList();
       
        // LOOP THROUGH SEMESTERS
        for (String semester: semesters) {
           ArrayList<ScheduleEntry> AllScheduleEntries = ScheduleQueries.getScheduleByStudent(semester, studentID);
           boolean someoneReplaced = false;
           
           if(AllScheduleEntries.size() != 0) { //CHECK THAT SEMESTER HAS CLASSES
                dropStudentTextArea.append("\n\nFor Semester: " + semester );

                // REMOVE HIM FROM HIS WAITLISTED CLASSES
                for(int i = 0;i < AllScheduleEntries.size();i++){
                    if(AllScheduleEntries.get(i).getStatus().equals("W")){
                    dropStudentTextArea.append("\n" + selectedStudent + " " + studentID + ", has been removed from the waitlist of " + AllScheduleEntries.get(i).getCourseCode());
                    ScheduleQueries.dropStudentScheduleByCourse(semester, studentID ,AllScheduleEntries.get(i).getCourseCode());
                    AllScheduleEntries.remove(i);
                    }
                }
                
                ArrayList<String> courseCodes = new ArrayList<>();

                // DROPPING FROM COURSE BY SEMESTER
                for(ScheduleEntry currentEntry : AllScheduleEntries) {
                   dropStudentTextArea.append("\n" + selectedStudent + studentID + " has been dropped from " + currentEntry.getCourseCode());
                   ScheduleQueries.dropStudentScheduleByCourse(semester, studentID ,currentEntry.getCourseCode());
                   courseCodes.add(currentEntry.getCourseCode());
                }
                
                // UPDATE COURSES TABLE
                 ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(currentSemester);
                 ((DefaultTableModel)displayCoursesTable.getModel()).setNumRows(0);
                for (CourseEntry course: courses) {
                    Object[] row = { course.getCourseCode(), course.getCourseDescription(), course.getSeats() };
                    DefaultTableModel model = (DefaultTableModel) displayCoursesTable.getModel();
                    model.addRow(row);
                }  
                
                // ENROLL WAITLISTED STUDENTS FOR A COURSE
                 for (String courseCode: courseCodes) {
                   ArrayList<ScheduleEntry> schedules = ScheduleQueries.getScheduledStudentsByCourse(semester, courseCode);
                   for (ScheduleEntry scheduleEntry: schedules) {
                    if (scheduleEntry.getStatus().equals("W")){
                        someoneReplaced = true;
                        ScheduleQueries.setStatus(scheduleEntry.getStudentID(), "S", scheduleEntry.getCourseCode());
                        String currentStudentID = scheduleEntry.getStudentID();
                        ArrayList<StudentEntry> allStudents = StudentQueries.getAllStudents();
                        String currentStudentFirstName = "";
                        String currentStudentLastName = "";
                         for (StudentEntry student: students) {
                            if (student.getStudentID().equals(currentStudentID)) {
                                currentStudentFirstName = student.getFirstName();
                                currentStudentLastName = student.getLastName();
                            }
                         }
                        CourseQueries.lowerSeats(currentSemester, scheduleEntry.getCourseCode()); 
                        dropStudentTextArea.append("\n" + currentStudentLastName + "," + currentStudentFirstName + currentStudentID + ", is now enrolled in " + courseCode);
                        // UPDATE COURSES TABLE
                        ArrayList<CourseEntry> courses2 = CourseQueries.getAllCourses(currentSemester);
                        ((DefaultTableModel)displayCoursesTable.getModel()).setNumRows(0);
                        for (CourseEntry course: courses2) {
                            Object[] row = { course.getCourseCode(), course.getCourseDescription(), course.getSeats() };
                            DefaultTableModel model = (DefaultTableModel) displayCoursesTable.getModel();
                            model.addRow(row);
                        }  
                        break;
                    } 
                     if(someoneReplaced == false){ CourseQueries.increaseSeats(currentSemester,scheduleEntry.getCourseCode() );}
                   }
                 }

             }
        }
            // EXTRA SPACE
         dropStudentTextArea.append("\n\n" + selectedStudent + " has been removed from all the student comboboxes.");  
         rebuildStudentComboBoxes();
         reBuildAStudentSchedule();
         reShowAdminStudentsOfACourse();
         reBuildAStudentSchedule();
         dropStudentTextArea.append("\n\n\n");  
    }//GEN-LAST:event_dropStudentButtonActionPerformed

    private void displayCourseListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayCourseListButtonActionPerformed
        // TODO add your handling code here:
        currentSemester = currentSemesterLabel.getText();
        ((DefaultTableModel)scheduledStudentsJTable.getModel()).setNumRows(0);
        ((DefaultTableModel)waitlistedStudentsJTable.getModel()).setNumRows(0);
        String courseCode = (String)(selectCourseComboBox3.getSelectedItem());
        ArrayList<ScheduleEntry> scheduled = new ArrayList<>();
        ArrayList<ScheduleEntry> waitListed = new ArrayList<>();
        scheduled = ScheduleQueries.getScheduledStudentsByCourse(currentSemester, courseCode);
            
         for (ScheduleEntry scheduleEntry: scheduled) {
             if ((scheduleEntry.getStatus()).equals("S")) {
                 ArrayList<String> name = new ArrayList<>();
                 ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
                 
            for (StudentEntry student: students) {
                if (student.getStudentID().equals(scheduleEntry.getStudentID())) {
                    Object[] row = { student.getFirstName(), student.getLastName(),student.getStudentID() };
                    DefaultTableModel model = (DefaultTableModel) scheduledStudentsJTable.getModel();
                    model.addRow(row);
                }    
            }           
            }else{
                 waitListed.add(scheduleEntry);
            }   
         }
         for (ScheduleEntry scheduleEntry: waitListed) {
            ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
            for (StudentEntry student: students) {
                if (student.getStudentID().equals(scheduleEntry.getStudentID())) {
                    Object[] row = { student.getFirstName(), student.getLastName(),student.getStudentID() };
                    DefaultTableModel model = (DefaultTableModel) waitlistedStudentsJTable.getModel();
                    model.addRow(row);
                }    
            }       
         }
        
    }//GEN-LAST:event_displayCourseListButtonActionPerformed

    private void dropCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropCourseButtonActionPerformed
        // TODO add your handling code here:
        currentSemester = currentSemesterLabel.getText();
        courseDroppedTextArea.setText("");
        String selectedCourse = (String)(selectCourseComboBox4.getSelectedItem());
        if (selectedCourse == null){return;}
        courseDroppedTextArea.append( selectedCourse + " course has been dropped!\n");
       
         ArrayList<ScheduleEntry> allSchedules = ScheduleQueries.getAllSchedules(currentSemester);
         for(ScheduleEntry oneEntry: allSchedules){
             if(oneEntry.getCourseCode().equals(selectedCourse)){
                 String currentStudentID = oneEntry.getStudentID();
                 ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
                 String currentStudentFirstName = "";
                 String currentStudentLastName = "";
                 for (StudentEntry student: students) {
                     if (student.getStudentID().equals(currentStudentID)) {
                          currentStudentFirstName = student.getFirstName();
                          currentStudentLastName = student.getLastName();
                           }
                     }
                 if (oneEntry.getStatus().equals("S")){
                   courseDroppedTextArea.append("\n" + currentStudentLastName + "," + currentStudentFirstName + " " +currentStudentID + " has been droppped from " + oneEntry.getCourseCode());    
                 }else{
                   courseDroppedTextArea.append("\n" + currentStudentLastName + "," + currentStudentFirstName + " " +currentStudentID + " has been droppped from the waitlist of " + oneEntry.getCourseCode());    
                 }
             }
         }
         ScheduleQueries.dropScheduleByCourse(currentSemester, selectedCourse);
         CourseQueries.dropCourse(currentSemester, selectedCourse);
         courseDroppedTextArea.append("\n\n\n");
         rebuildCourseComboBox();
         ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(currentSemester);
        ((DefaultTableModel)displayCoursesTable.getModel()).setNumRows(0);
        for (CourseEntry course: courses) {
            Object[] row = { course.getCourseCode(), course.getCourseDescription(), course.getSeats() };
            DefaultTableModel model = (DefaultTableModel) displayCoursesTable.getModel();
            model.addRow(row);
        }
        reBuildAStudentSchedule();
    }//GEN-LAST:event_dropCourseButtonActionPerformed

    private void studentDropCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentDropCourseButtonActionPerformed
        // TODO add your handling code here:
        // CourseComboBox2
        String selectedStudent = (String)(selectStudentComboBox3.getSelectedItem());
        String selectedCourse = (String)(selectCourseComboBox2.getSelectedItem());
        boolean someoneReplacing = false;
        if(selectedStudent==null ||selectedCourse==null ){return;}
        
        studentDropCourseTextArea.setText("");
        currentSemester = currentSemesterLabel.getText();
        String[] studentList = selectedStudent.split(", ");
        String studentID = "";
        String lastName = studentList[0];
        String firstName = studentList[1];
        
        ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
        for (StudentEntry student: students) {
            if (student.getFirstName().equals(firstName) && student.getLastName().equals(lastName)) {
                studentID = student.getStudentID();
            }
       }
       
        boolean isTakingClass = false;
        boolean studentIsWaitLister = false;

       // CHECK IF STUDENT IS ENROLLED IN COURSE
       ArrayList<ScheduleEntry> scheduleOfStudent = ScheduleQueries.getScheduleByStudent(currentSemester, studentID);
       for (ScheduleEntry oneEntry: scheduleOfStudent){
           if(oneEntry.getCourseCode().equals(selectedCourse) ){
               isTakingClass = true;
               if(oneEntry.getStatus().equals("W")){ studentIsWaitLister = true;}
           }
       }
       if(isTakingClass == true){
       ScheduleQueries.dropStudentScheduleByCourse(currentSemester, studentID, selectedCourse);
       
       studentDropCourseTextArea.append(lastName + "," + firstName + studentID + " has dropped " + selectedCourse );
       
       if(studentIsWaitLister == false) {
       ArrayList<ScheduleEntry> schedules = ScheduleQueries.getScheduledStudentsByCourse(currentSemester, selectedCourse);
       for (ScheduleEntry scheduleEntry: schedules) {
            if (scheduleEntry.getStatus().equals("W")){
                    someoneReplacing = true;
                    ScheduleQueries.setStatus(scheduleEntry.getStudentID(), "S", scheduleEntry.getCourseCode());
                    String currentStudentID = scheduleEntry.getStudentID();
                    ArrayList<StudentEntry> allStudents = StudentQueries.getAllStudents();
                    String currentStudentFirstName = "";
                    String currentStudentLastName = "";
                    for (StudentEntry student: students) {
                            if (student.getStudentID().equals(currentStudentID)) {
                                currentStudentFirstName = student.getFirstName();
                                currentStudentLastName = student.getLastName();
                       }
                    }
                    studentDropCourseTextArea.append("\n" + currentStudentLastName + "," + currentStudentFirstName + currentStudentID + ", is now enrolled in " + selectedCourse);
                    break;
       }}}
       }else{
       someoneReplacing = false;
       studentDropCourseTextArea.setText("Student is Currently not enrolled in that class");
       }
             

        if (someoneReplacing == false || (studentIsWaitLister == false  && someoneReplacing == false)  ){  
        CourseQueries.increaseSeats(currentSemester, selectedCourse);}
        
        if(studentIsWaitLister == true){
        CourseQueries.lowerSeats(currentSemester, selectedCourse);
        }
                    // UPDATE COURSES TABLE
                    ArrayList<CourseEntry> courses2 = CourseQueries.getAllCourses(currentSemester);
                    ((DefaultTableModel)displayCoursesTable.getModel()).setNumRows(0);
                     for (CourseEntry course: courses2) {
                         Object[] row = { course.getCourseCode(), course.getCourseDescription(), course.getSeats() };
                         DefaultTableModel model = (DefaultTableModel) displayCoursesTable.getModel();
                         model.addRow(row); 
                     }
               
                reShowAdminStudentsOfACourse();
                reBuildAStudentSchedule();
    }//GEN-LAST:event_studentDropCourseButtonActionPerformed
    
    private void reShowAdminStudentsOfACourse(){
        currentSemester = currentSemesterLabel.getText();
        ((DefaultTableModel)scheduledStudentsJTable.getModel()).setNumRows(0);
        ((DefaultTableModel)waitlistedStudentsJTable.getModel()).setNumRows(0);
        String courseCode = (String)(selectCourseComboBox3.getSelectedItem());
        ArrayList<ScheduleEntry> scheduled = new ArrayList<>();
        ArrayList<ScheduleEntry> waitListed = new ArrayList<>();
        scheduled = ScheduleQueries.getScheduledStudentsByCourse(currentSemester, courseCode);
            
         for (ScheduleEntry scheduleEntry: scheduled) {
             if ((scheduleEntry.getStatus()).equals("S")) {
                 ArrayList<String> name = new ArrayList<>();
                 ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
                 
            for (StudentEntry student: students) {
                if (student.getStudentID().equals(scheduleEntry.getStudentID())) {
                    Object[] row = { student.getFirstName(), student.getLastName(),student.getStudentID() };
                    DefaultTableModel model = (DefaultTableModel) scheduledStudentsJTable.getModel();
                    model.addRow(row);
                }    
            }           
            }else{
                 waitListed.add(scheduleEntry);
            }   
         }
         for (ScheduleEntry scheduleEntry: waitListed) {
            ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
            for (StudentEntry student: students) {
                if (student.getStudentID().equals(scheduleEntry.getStudentID())) {
                    Object[] row = { student.getFirstName(), student.getLastName(),student.getStudentID() };
                    DefaultTableModel model = (DefaultTableModel) waitlistedStudentsJTable.getModel();
                    model.addRow(row);
                }    
            }       
         }
        
    }
    
    private void reBuildAStudentSchedule(){
        ((DefaultTableModel)displayScheduleTable.getModel()).setNumRows(0);
        currentSemester = currentSemesterLabel.getText();
        String selectedStudent = (String)(selectStudentComboBox2.getSelectedItem());
        String[] studentList = selectedStudent.split(", ");
        String lastName = studentList[0];
        String firstName = studentList[1];
        String studentID = "";
        
        ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
        for (StudentEntry student: students) {
            if (student.getFirstName().equals(firstName) && student.getLastName().equals(lastName)){
                studentID = student.getStudentID();
            }
        }

        ArrayList<ScheduleEntry> schedules = ScheduleQueries.getScheduleByStudent(currentSemester, studentID);
        
        for (ScheduleEntry entry: schedules) {
            Object[] row = { entry.getCourseCode(), entry.getStatus() };
            DefaultTableModel model = (DefaultTableModel) displayScheduleTable.getModel();
            model.addRow(row);
        }   
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddSemesterSubmitButton;
    private javax.swing.JLabel addCourseStatusLabel;
    private javax.swing.JButton addCourseSubmitButton;
    private javax.swing.JLabel addSemesterStatus;
    private javax.swing.JTextField addSemesterTextfield;
    private javax.swing.JButton addStudentSubmitButton;
    private javax.swing.JButton changeSemesterButton;
    private javax.swing.JComboBox<String> changeSemesterComboBox;
    private javax.swing.JTextField courseCodeTextField;
    private javax.swing.JTextField courseDescriptionTextField;
    private javax.swing.JTextArea courseDroppedTextArea;
    private javax.swing.JLabel currentSemesterLabel;
    private javax.swing.JButton displayCourseListButton;
    private javax.swing.JButton displayCoursesButton;
    private javax.swing.JTable displayCoursesTable;
    private javax.swing.JTable displayScheduleTable;
    private javax.swing.JButton displayStudentScheduleButton;
    private javax.swing.JButton dropCourseButton;
    private javax.swing.JButton dropStudentButton;
    private javax.swing.JTextArea dropStudentTextArea;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JLabel scheduleCourseStatusLabel;
    private javax.swing.JButton scheduleCourseSubmitButton;
    private javax.swing.JTable scheduledStudentsJTable;
    private javax.swing.JSpinner seatsSpinner;
    private javax.swing.JComboBox<String> selectCourseComboBox;
    private javax.swing.JComboBox<String> selectCourseComboBox2;
    private javax.swing.JComboBox<String> selectCourseComboBox3;
    private javax.swing.JComboBox<String> selectCourseComboBox4;
    private javax.swing.JComboBox<String> selectStudentComboBox;
    private javax.swing.JComboBox<String> selectStudentComboBox2;
    private javax.swing.JComboBox<String> selectStudentComboBox3;
    private javax.swing.JComboBox<String> selectStudentComboBox4;
    private javax.swing.JLabel studentAddedLabel;
    private javax.swing.JButton studentDropCourseButton;
    private javax.swing.JTextArea studentDropCourseTextArea;
    private javax.swing.JTextField studentIDTextField;
    private javax.swing.JTable waitlistedStudentsJTable;
    // End of variables declaration//GEN-END:variables
}
